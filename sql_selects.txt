INSERT INTO operations (user_id, briefcase_id, status_id, operation_name_id, stock_name, stocks_amount, stock_price)
    VALUES (1, 1, 1, 1, 'A', 10, 101);



-----------Row_Number
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at) AS row_num
FROM
    operations;


----------Rank
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    RANK() OVER (PARTITION BY user_id ORDER BY stock_price DESC) AS rank
FROM
    operations;


----------Dense Rank
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    DENSE_RANK() OVER (PARTITION BY user_id ORDER BY stock_price DESC) AS dense_rank
FROM
    operations;


-----------Ntile
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    NTILE(4) OVER (PARTITION BY user_id ORDER BY created_at) AS ntile
FROM
    operations;


--------LAG
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    LAG(stock_price, 1, 0) OVER (PARTITION BY user_id ORDER BY created_at) AS prev_stock_price
FROM
    operations;





--------LEAD
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    LEAD(stock_price, 1, 0) OVER (PARTITION BY user_id ORDER BY created_at) AS next_stock_price
FROM
    operations;



--------CUME DUST
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    CUME_DIST() OVER (PARTITION BY user_id ORDER BY stock_price) AS cume_dist
FROM
    operations;



---------First value
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    FIRST_VALUE(stock_price) OVER (PARTITION BY user_id ORDER BY created_at) AS first_stock_price
FROM
    operations;





--------Last value
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    LAST_VALUE(stock_price) OVER (PARTITION BY user_id ORDER BY created_at RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_stock_price
FROM
    operations;






-------AVG
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    AVG(stock_price) OVER (PARTITION BY user_id) AS avg_stock_price
FROM
    operations;




------Min
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    MIN(stock_price) OVER (PARTITION BY user_id) AS min_stock_price
FROM
    operations;




------Max
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    MAX(stock_price) OVER (PARTITION BY user_id) AS max_stock_price
FROM
    operations;




---------Sum
SELECT
    id,
    user_id,
    briefcase_id,
    status_id,
    operation_name_id,
    stock_id,
    stocks_amount,
    stock_price,
    created_at,
    SUM(stocks_amount) OVER (PARTITION BY user_id) AS total_stocks_amount
FROM
    operations;










--------------селекция
SELECT * FROM users WHERE age > 30;

------------проекция
SELECT fio, age FROM users;

-------------объединение
SELECT id, fio AS name FROM users
UNION
SELECT id, briefcase_name AS name FROM briefcases;


-------------пересечение
SELECT id FROM users
INTERSECT
SELECT user_id AS id FROM briefcases;

------------разность
SELECT id FROM operation_statuses
EXCEPT
SELECT status_id AS id FROM operations;

------произведение
SELECT * FROM users, briefcases;

----------соединение
SELECT users.fio, briefcases.briefcase_name
FROM users
JOIN briefcases ON users.id = briefcases.user_id;

-------деление
SELECT DISTINCT u.id, u.fio
FROM users u
WHERE NOT EXISTS (
    SELECT 1
    FROM briefcases b
    WHERE NOT EXISTS (
        SELECT 1
        FROM briefcase_stocks bs
        WHERE bs.briefcase_id = b.id
    )
);


------группировка, сортировка
SELECT
    u.id AS user_id,
    u.fio,
    COUNT(b.id) AS briefcase_count,
    SUM(b.balance_now) AS total_balance_now,
    SUM(b.deposited_balance) AS total_deposited
FROM
    users u
LEFT JOIN
    briefcases b ON u.id = b.user_id
GROUP BY
    u.id, u.fio
ORDER BY
    u.id;



