INSERT INTO operations (user_id, briefcase_id, status_id, operation_name_id, stock_name, stocks_amount, stock_price)
    VALUES (1, 1, 1, 1, 'A', 10, 101);


------------Row_number()
SELECT
    id,
    name,
    ROW_NUMBER() OVER (ORDER BY name) AS row_num
FROM
    operation_names;
---------Rank()
SELECT
    id,
    fio,
    age,
    RANK() OVER (ORDER BY age DESC) AS age_rank
FROM
    users;
-------------Dense_rank()
SELECT
    id,
    name,
    DENSE_RANK() OVER (ORDER BY name) AS dense_rank
FROM
    operation_names;
--------lag
SELECT
    id,
    stock_price,
    LAG(stock_price, 1) OVER (ORDER BY created_at) AS prev_stock_price
FROM
    operations;
----------lead
SELECT
    id,
    stock_price,
    LEAD(stock_price, 1) OVER (ORDER BY created_at) AS next_stock_price
FROM
    operations;
--------------ntile
SELECT
    id,
    fio,
    NTILE(4) OVER (ORDER BY age) AS quartile
FROM
    users;
----------first value
SELECT
    user_id,
    fio,
    FIRST_VALUE(fio) OVER (PARTITION BY age ORDER BY fio) AS first_fio
FROM
    users;
---------------last_value
SELECT
    user_id,
    fio,
    LAST_VALUE(fio) OVER (PARTITION BY age ORDER BY fio RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_fio
FROM
    users;
-------------Sum
SELECT
    briefcase_id,
    SUM(stocks_amount) OVER (PARTITION BY briefcase_id) AS total_stocks
FROM
    briefcase_stocks;
---------avg
SELECT
    stock_id,
    AVG(stock_price) OVER (PARTITION BY stock_id) AS avg_price
FROM
    operations;
-------------count
SELECT
    user_id,
    COUNT(*) OVER (PARTITION BY user_id) AS operation_count
FROM
    operations;
-----min
SELECT
    briefcase_id,
    briefcase_name,
    deposited_balance,
    MIN(deposited_balance) OVER (PARTITION BY user_id) AS min_deposited_balance
FROM
    briefcases;
--------max
SELECT
    briefcase_id,
    briefcase_name,
    balance_now,
    MAX(balance_now) OVER (PARTITION BY user_id) AS max_balance_now
FROM
    briefcases;





--------------селекция
SELECT * FROM users WHERE age > 30;

------------проекция
SELECT fio, age FROM users;

-------------объединение
SELECT id, fio AS name FROM users
UNION
SELECT id, briefcase_name AS name FROM briefcases;


-------------пересечение
SELECT id FROM users
INTERSECT
SELECT user_id AS id FROM briefcases;

------------разность
SELECT id FROM operation_statuses
EXCEPT
SELECT status_id AS id FROM operations;

------произведение
SELECT * FROM users, briefcases;

----------соединение
SELECT users.fio, briefcases.briefcase_name
FROM users
JOIN briefcases ON users.id = briefcases.user_id;

-------деление
SELECT DISTINCT u.id, u.fio
FROM users u
WHERE NOT EXISTS (
    SELECT 1
    FROM briefcases b
    WHERE NOT EXISTS (
        SELECT 1
        FROM briefcase_stocks bs
        WHERE bs.briefcase_id = b.id
    )
);


------группировка, сортировка
SELECT
    u.id AS user_id,
    u.fio,
    COUNT(b.id) AS briefcase_count,
    SUM(b.balance_now) AS total_balance_now,
    SUM(b.deposited_balance) AS total_deposited
FROM
    users u
LEFT JOIN
    briefcases b ON u.id = b.user_id
GROUP BY
    u.id, u.fio
ORDER BY
    u.id;



